<?php

/**
 * @file
 * Activity Heatmap module.
 */

/**
 * Implements hook_menu().
 */
function activity_calendar_menu() {
  $items['admin/config/people/activity_calendar'] = [
   'title' => 'Activity calendar',
   'description' => 'Configure settings for activity calendar.',
   'type' => MENU_NORMAL_ITEM,
   'page callback' => 'backdrop_get_form',
   'page arguments' => ['activity_calendar_admin_form'],
   'access arguments' => ['administer site configuration'],
   'file' => 'activity_calendar.admin.inc',
];
return $items;
}

/**
 * Implements hook_user_view_alter().
 */
function activity_calendar_user_view_alter(&$build) {
  $config = config('activity_calendar.settings');
  $uid = $build['#account']->uid;
  // Load libraries.
  $path = backdrop_get_path('module', 'activity_calendar');
  backdrop_add_css($path . '/activity_calendar.css');
  backdrop_add_css($path . '/lib/cal-heatmap.css');
  backdrop_add_js($path . '/lib/d3.min.js');
  backdrop_add_js($path . '/lib/cal-heatmap.min.js');
  // Define calendar type and range parameter.
  if ($config->get('calendar_type') == 'monthly') {
    $calendar_type = 'month';
    $range = '12';
  }
  else {
    $calendar_type = 'year';
    $range = '1';
  }

  // Sync calendar with the system's first day of the week.
  if (config_get('system.date', 'first_day') == '1') {
    $first_day = "true";
  }
  else {
    $first_day = "false";
  }

  // Collect node points.
  if ($config->get('nodes') == 1) {
    $prefix = 'node_type_';
    foreach ($config->get() as $option => $value) {
      if (strpos($option, $prefix) !== FALSE) {
        if ($value == TRUE) {
          $content_type = str_replace($prefix, "", $option);
          $points = $config->get($content_type . '_points');
          $nodes = db_select('node', 'n')
          ->fields('n', array('nid', 'created'))
          ->condition('n.uid', $uid)
          ->condition('n.type', $content_type)
          ->condition('n.status', '1')
          ->execute()->fetchAll();
          foreach ($nodes as $node) {
            $viewed_user_activity[$node->created] = intval($points);
          }
        }
      }
    }
  }

  // Collect comment points.
  if ($config->get('comments') == 1) {
    $suffix = '_comments';
    foreach ($config->get() as $option => $value) {
      if (strpos($option, $suffix) !== FALSE) {
        if ($value == TRUE) {
          $content_type = str_replace($suffix, "", $option);
          $points = $config->get($content_type . '_comment_points');
          $query = db_select('comment', 'c');
          $query->leftJoin('node', 'n', 'c.nid = n.nid');
          $query->fields('c', array('nid', 'created'));
          $query->condition('n.type', $content_type);
          $query->condition('c.uid', $uid);
          $query->condition('c.status', '1');
          $comments = $query->execute()->fetchAll();
          foreach ($comments as $comment) {
            $viewed_user_activity[$comment->created] = intval($points);
          }
        }
      }
    }
  }

  // Calling all modules implementing 'hook_activity_calendar':
  module_invoke_all('calendar');
  foreach (module_implements('calendar') as $module) {
    $result[$module] = module_invoke($module, 'calendar');
    if ($result[$module]['viewed_user_activity']) {
      // Prepare array if nodes returned no user activity.
      if (!isset($viewed_user_activity)) {
        $viewed_user_activity = array();
      }
      $viewed_user_activity = $viewed_user_activity + $result[$module]['viewed_user_activity'];
    }
  }

  $control_buttons = '';
  if (!isset($viewed_user_activity)) {
    // Show empty calendar if there is no any user activity yet.
    $viewed_user_activity = array();
    $start = time();
  }
  else {
    // Display the control button only if user has nodes for previous years.
    $first_node_date = min(array_keys($viewed_user_activity));
    $start = date("Y", $first_node_date);
    if ($start < date("Y", time())) {
      $control_buttons = '<div class="control-buttons">
      <button id="PreviousYear" class="button previous">' . t('Previous') . '</button>
      <button id="NextYear" class="button next">' . t('Next') . '</button>
      <button id="CurrentYear" class="button current">' . t('Current') . '</button>
      </div>';
    }
  }

  // Build activity heatmap calendar.
  $build['heatmap'] = [
    '#type' => 'item',
    '#title' => t('Activity calendar'),
    '#weight' => '100',
    '#markup' => '
    <div id="activity-calendar">
    ' . $control_buttons . '
    <div id="heatmap"></div>
    </div>
    <script type="text/javascript">
    var viewed_user_activity = ' . json_encode($viewed_user_activity) . ';
    var mcal = new CalHeatMap();
    mcal.init({
      itemNamespace: "viewed_user",
      legendColors: ["' . $config->get('color_min') . '","' . $config->get('color_max') . '"],
    	itemSelector: "#heatmap",
    	domain: "' . $calendar_type . '",
    	subDomain: "day",
    	data: viewed_user_activity,
      minDate: new Date(' . $start . ', 1),
      start: new Date(' . date("Y") . ', 0),
      maxDate: new Date(' . date("Y") . ', 0),
      onMinDomainReached: function(hit) {
      if (hit) {
          $("#PreviousYear").attr("disabled", "disabled");
        } else {
          $("#PreviousYear").attr("disabled", false);
        }
      },
      onMaxDomainReached: function(hit) {
      if (hit) {
          $("#NextYear").attr("disabled", "disabled");
        } else {
          $("#NextYear").attr("disabled", false);
        }
      },
    	cellSize: 10,
    	cellPadding: 1,
      domainGutter: 0,
    	range: ' . $range . ',
      itemName: ["' . t('point') . '", "' . t('points') . '"],
      domainDynamicDimension: false,
    	previousSelector: "#PreviousYear",
    	nextSelector: "#NextYear",
      legend: [' . $config->get('thresholds') . '],
      highlight: "now",
      weekStartOnMonday: ' . $first_day . ',
    });
    $("#CurrentYear").on("click", function(event) {
      mcal.rewind();
    });
    </script>',
  ];
}

/**
 * Implements hook_block_info().
 */
function activity_calendar_block_info() {
  $blocks['user'] = array(
    'info' => t('User activity calendar'),
    'description' => t('Block that shows user activity calendar.'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function activity_calendar_block_view($delta = '') {
  // Load only for registered users and when not on user pages.
  if (user_is_anonymous()) {
    return;
  }
  $block = array();
  switch ($delta) {
    case 'user':
      $block['subject'] = t('My activity');
      $block['content'] = activity_calendar_block_contents($delta);
      break;
  }
  return $block;
}


/**
 * Returns block content.
 */
function activity_calendar_block_contents($delta) {
  global $user;

  $config = config('activity_calendar.settings');
  // Load libraries.
  $scripts = backdrop_add_js();
  if(!isset($scripts['modules/activity_calendar/lib/cal-heatmap.min.js'])) {
    $path = backdrop_get_path('module', 'activity_calendar');
    backdrop_add_css($path . '/activity_calendar.css');
    backdrop_add_css($path . '/lib/cal-heatmap.css');
    backdrop_add_js($path . '/lib/d3.min.js');
    backdrop_add_js($path . '/lib/cal-heatmap.min.js');
  }

  // Collect node points.
  if ($config->get('nodes') == 1) {
    $prefix = 'node_type_';
    foreach ($config->get() as $option => $value) {
      if (strpos($option, $prefix) !== FALSE) {
        if ($value == TRUE) {
          $content_type = str_replace($prefix, "", $option);
          $points = $config->get($content_type . '_points');
          $nodes = db_select('node', 'n')
          ->fields('n', array('nid', 'created'))
          ->condition('n.uid', $user->uid)
          ->condition('n.type', $content_type)
          ->condition('n.created', strtotime('first day of this month'), '>=')
          ->condition('n.status', '1')
          ->execute()->fetchAll();
          foreach ($nodes as $node) {
            $current_user_activity[$node->created] = intval($points);
          }
        }
      }
    }
  }

  // Collect comment points.
  if ($config->get('comments') == 1) {
    $suffix = '_comments';
    foreach ($config->get() as $option => $value) {
      if (strpos($option, $suffix) !== FALSE) {
        if ($value == TRUE) {
          $content_type = str_replace($suffix, "", $option);
          $points = $config->get($content_type . '_comment_points');
          $query = db_select('comment', 'c');
          $query->leftJoin('node', 'n', 'c.nid = n.nid');
          $query->fields('c', array('nid', 'created'));
          $query->condition('n.type', $content_type);
          $query->condition('c.uid', $user->uid);
          $query->condition('c.created', strtotime('first day of this month'), '>=');
          $query->condition('c.status', '1');
          $comments = $query->execute()->fetchAll();
          foreach ($comments as $comment) {
            $current_user_activity[$comment->created] = intval($points);
          }
        }
      }
    }
  }

  // Prepare array if nodes returned no user activity.
  if (!isset($current_user_activity)) {
    $current_user_activity = array();
  }
  // Calling all modules implementing 'hook_activity_calendar':
  module_invoke_all('calendar');
  foreach (module_implements('calendar') as $module) {
    $result[$module] = module_invoke($module, 'calendar');
    if (isset($result[$module]['current_user_activity'])) {
      $current_user_activity = $current_user_activity + $result[$module]['current_user_activity'];
    }
  }

  // Sync calendar with the system's first day of the week.
  if (config_get('system.date', 'first_day') == '1') {
    $first_day = "true"; // The js requires this written as lowercase string.
  }
  else {
    $first_day = "false"; // The js requires this written as lowercase string.
  }
  $content = '<div id="user-activity-heatmap"></div>';
  $content .= '
   <script type="text/javascript">
      var current_user_activity = ' . json_encode($current_user_activity) . ';
    	var bcal = new CalHeatMap();
    	bcal.init({
        itemNamespace: "current_user",
        legendColors: ["' . $config->get('color_min') . '","' . $config->get('color_max') . '"],
        itemSelector: "#user-activity-heatmap",
        domain: "month",
        data: current_user_activity,
        cellSize: 15,
        cellPadding: 1,
        range: 1,
        itemName: ["' . t('point') . '", "' . t('points') . '"],
        legend: [' . $config->get('thresholds') . '],
        legendVerticalPosition: "center",
	      legendOrientation: "vertical",
        label: {
      		position: "right",
      		rotate: "left"
      	},
        highlight: "now",
        weekStartOnMonday: ' . $first_day . ',
        domainDynamicDimension: false,
      });
    </script>
    ';
    return $content;
  }

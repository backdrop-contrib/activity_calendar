<?php

/**
 * @file
 * Activity Heatmap module.
 */

/**
 * Implements hook_menu().
 */
function activity_calendar_menu() {
 $items['admin/config/people/activity_calendar'] = [
   'title' => 'Activity calendar',
   'description' => 'Configure settings for activity calendar.',
   'type' => MENU_NORMAL_ITEM,
   'page callback' => 'backdrop_get_form',
   'page arguments' => ['activity_calendar_admin_form'],
   'access arguments' => ['administer site configuration'],
   'file' => 'activity_calendar.admin.inc',
 ];

 return $items;
}

/**
* Implements hook_user_view_alter().
*/
function activity_calendar_user_view_alter(&$build) {
  $config = config('activity_calendar.settings');
  $uid = $build['#account']->uid;
  $path = backdrop_get_path('module', 'activity_calendar');
  // Load libraries.
  backdrop_add_css($path . '/activity_calendar.css');
  backdrop_add_css($path . '/lib/cal-heatmap.css');
  backdrop_add_js($path . '/lib/d3.min.js');
  backdrop_add_js($path . '/lib/cal-heatmap.min.js');
  // Define calendar type and range parameter.
  if ($config->get('calendar_type') == 'monthly') {
    $calendar_type = 'month';
    $range = '12';
  }
  else {
    $calendar_type = 'year';
    $range = '1';
  }

  if ($config->get('nodes') == 1) {

    $prefix = 'node_type_';
    foreach ($config->get() as $option => $value) {
     if (strpos($option, $prefix) !== FALSE) {
       if ($value == TRUE) {
         $content_type = str_replace($prefix,"",$option);
         // Collect node points.
         $nodes = db_select('node', 'n')
          ->fields('n', array('nid', 'created'))
          ->condition('n.uid', $uid)
          ->condition('n.type', $content_type)
          ->condition('n.status', '1')
          ->execute()->fetchAll();
        foreach ($nodes as $node) {
          $user_activity[$node->created] = intval($config->get('node_points'));
        }
       }
     }
    }
  }

  if ($config->get('comments') == 1) {
  // Collect comment points.
  $comments = db_select('comment', 'c')
     ->fields('c', array('cid', 'created'))
     ->condition('c.uid', $uid)
     ->condition('c.status', '1')
     ->execute()->fetchAll();
     foreach ($comments as $comment) {
       $user_activity[$comment->created] = intval($config->get('comment_points'));
     }
  }

  // Display the control button only if user has nodes for previous years.
  $first_node_date = min(array_keys($user_activity));
  $start = date("Y",$first_node_date);
  if ($start < date("Y", time())) {
    $control_buttons = '<div class="control-buttons">
    <button id="PreviousDomain" class="btn previous">'.t('Previous').'</button>
    <button id="CurrentDomain" class="btn current">'.t('Current').'</button>
    <button id="NextDomain" class="btn next">'.t('Next').'</button>
    </div>';
  }

  // Build activity heatmap calendar.
  $build['heatmap'] = [
    '#type' => 'item',
    '#title' => t('Activity calendar'),
    '#weight' => '100',
    '#markup' => '
    <div id="activity-calendar">
    '.$control_buttons.'
    <div id="heatmap"></div>
    </div>
    <script type="text/javascript">
    var user_activity = '.json_encode($user_activity).';
    var cal = new CalHeatMap();
    cal.init({
      legendColors: ["'.$config->get('color_min').'","'.$config->get('color_max').'"],
    	itemSelector: "#heatmap",
    	domain: "'.$calendar_type.'",
    	subDomain: "day",
    	data: user_activity,
      minDate: new Date('.$start.', 1),
      start: new Date('.date("Y").', 0),
      maxDate: new Date('.date("Y").', 0),
      onMinDomainReached: function(hit) {
      if (hit) {
          $("#PreviousDomain").attr("disabled", "disabled");
        } else {
          $("#PreviousDomain").attr("disabled", false);
        }
      },
      onMaxDomainReached: function(hit) {
      if (hit) {
          $("#NextDomain").attr("disabled", "disabled");
        } else {
          $("#NextDomain").attr("disabled", false);
        }
      },
    	cellSize: 10,
    	cellPadding: 1,
      domainGutter: 0,
    	range: '.$range.',
      itemName: ["'.t('point').'", "'.t('points').'"],
      domainDynamicDimension: false,
    	previousSelector: "#PreviousDomain",
    	nextSelector: "#NextDomain",
      legend: ['.$config->get('thresholds').']
    });
    $("#CurrentDomain").on("click", function(event) {
      cal.rewind();
    });


    </script>',
  ];
}
